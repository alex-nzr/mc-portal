{"version":3,"file":"index.bundle.js","sources":["../src/scripts/external-participant.js","../src/index.js"],"sourcesContent":["\r\n\r\nexport class ExternalParticipant\r\n{\r\n    constructor(options = {}) {\r\n        this.moduleId           = options.moduleId;\r\n        this.providerEntityId   = options.providerEntityId;\r\n        this.providerEntityType = options.providerEntityType;\r\n\r\n        this.submitAddFormBtnId = 'add-ext-participant-submit-btn';\r\n    }\r\n\r\n    showSelector(userFieldData = {}){\r\n        const fieldName = userFieldData['FIELD_NAME'];\r\n        const isMultiple = (userFieldData['MULTIPLE'] === 'Y');\r\n\r\n        this.tagSelector = new BX.UI.EntitySelector.TagSelector({\r\n            id: `${fieldName}_selector`,\r\n            multiple: isMultiple,\r\n            addButtonCaption: BX.message('SELECT_TEXT'),\r\n            addButtonCaptionMore: BX.message('MORE_TEXT'),\r\n            dialogOptions: {\r\n                context: 'EXTERNAL_PARTICIPANT_SELECTOR_CONTEXT',\r\n                entities: [\r\n                    {\r\n                        id           : this.providerEntityId,\r\n                        options      : {},\r\n                        dynamicLoad  : true,\r\n                        dynamicSearch: true,\r\n                    },\r\n                ],\r\n                hideOnSelect:          false,\r\n                hideByEsc:             true,\r\n                searchOptions: {\r\n                    allowCreateItem: false,\r\n                    footerOptions: {\r\n                        label: ''\r\n                    }\r\n                },\r\n                footer: BX.create('span', {\r\n                    props: {\r\n                        id: `${fieldName}_add`,\r\n                        className: \"ui-selector-footer-link ui-selector-footer-link-add\"\r\n                    },\r\n                    text: BX.message('ADD_TEXT'),\r\n                    events: {\r\n                        click: () => this.showAddPopup(),\r\n                    }\r\n                }),\r\n                events: {}\r\n            },\r\n            events: {\r\n                onAfterTagAdd: (event) => {\r\n                    const {tag} = event.getData();\r\n                    const id = tag.id;\r\n                    const container = BX(userFieldData['CONTAINER_ID']);\r\n                    if (container)\r\n                    {\r\n                        const inputId = isMultiple ? `${fieldName}_add_${id}` : `${fieldName}_add`;\r\n                        let input = BX(inputId);\r\n                        if (input)\r\n                        {\r\n                            input.value = id;\r\n                        }\r\n                        else\r\n                        {\r\n                            input = BX.create('input', {\r\n                                props: {\r\n                                    id: inputId,\r\n                                    value: id,\r\n                                    type: \"hidden\",\r\n                                    name: isMultiple ? `${fieldName}[]` : fieldName,\r\n                                },\r\n                            });\r\n                            container.append(input);\r\n                        }\r\n\r\n                        BX.Crm?.EntityEditor?.getDefault()?.getControlById(fieldName)?.markAsChanged();\r\n                    }\r\n                },\r\n                onAfterTagRemove: function(event) {\r\n                    const {tag} = event.getData();\r\n                    const id = tag.id;\r\n                    const container = BX(userFieldData['CONTAINER_ID']);\r\n                    if (container)\r\n                    {\r\n                        const inputId = isMultiple ? `${fieldName}_add_${id}` : `${fieldName}_add`;\r\n                        const input = BX(inputId);\r\n                        input && (input.value = '');\r\n                        BX.Crm?.EntityEditor?.getDefault()?.getControlById(fieldName)?.markAsChanged();\r\n                    }\r\n                },\r\n            }\r\n        });\r\n\r\n        if(typeof userFieldData['VALUE_ITEMS'] === 'object')\r\n        {\r\n            for(let key in userFieldData['VALUE_ITEMS'])\r\n            {\r\n                const item = userFieldData['VALUE_ITEMS'][key];\r\n                this.tagSelector.addTag({\r\n                    id: item['ID'],\r\n                    entityId: this.providerEntityId,\r\n                    entityType: this.providerEntityType,\r\n                    title: {\r\n                        text: `${item['NAME']} ${item['SECOND_NAME']} ${item['LAST_NAME']}`,\r\n                    },\r\n                });\r\n            }\r\n        }\r\n\r\n        this.tagSelector.renderTo(BX(userFieldData['PLACEMENT_ID']));\r\n    }\r\n\r\n    showAddPopup() {\r\n        this.addFormNode  = this.createAddForm();\r\n        this.addFormPopup = BX.PopupWindowManager.create(\r\n            \"add-ext-participant-popup\",\r\n            null,\r\n            {\r\n                content: this.addFormNode,\r\n                width: 500,\r\n                closeIcon: false,\r\n                titleBar: BX.message('ADD_POPUP_TITLE'),\r\n                closeByEsc: false,\r\n                overlay: {\r\n                    backgroundColor: 'black',\r\n                    opacity: 500\r\n                },\r\n                buttons: [\r\n                    new BX.PopupWindowButton({\r\n                        text: BX.message('SAVE_TEXT'),\r\n                        className: 'ui-btn ui-btn-primary',\r\n                        id: this.submitAddFormBtnId,\r\n                        events: {\r\n                            click: () => {\r\n                                this.submitAddForm();\r\n                            }\r\n                        }\r\n                    }),\r\n                    new BX.PopupWindowButton({\r\n                        text: BX.message('EXIT_TEXT'),\r\n                        className: 'ui-btn ui-btn-default',\r\n                        events: {\r\n                            click: () => {\r\n                                this.addFormPopup.close();\r\n                            }\r\n                        }\r\n                    })\r\n                ],\r\n            }\r\n        );\r\n\r\n        this.addFormPopup.show();\r\n    }\r\n\r\n    createAddForm() {\r\n        return BX.create('form', {\r\n            children: [\r\n                this.createTextInput(BX.message('FIELD_NAME_LABEL'), `NAME`, true),\r\n                this.createTextInput(BX.message('FIELD_SECOND_NAME_LABEL'), `SECOND_NAME`, false),\r\n                this.createTextInput(BX.message('FIELD_LAST_NAME_LABEL'), `LAST_NAME`, true),\r\n                this.createTextInput(BX.message('FIELD_COMPANY_LABEL'), `COMPANY`, true),\r\n                this.createTextInput(BX.message('FIELD_POSITION_LABEL'), `POSITION`, true),\r\n            ]\r\n        });\r\n    }\r\n\r\n    submitAddForm() {\r\n        if (!this.validateForm(this.addFormNode))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        const submitBtn =  BX(this.submitAddFormBtnId);\r\n        submitBtn && submitBtn.classList.add(\"ui-btn-wait\");\r\n\r\n        const formData = new FormData(this.addFormNode);\r\n\r\n        BX.ajax.runAction('cbit.mc:expense.base.addExternalParticipant', {\r\n            sessid: BX.bitrix_sessid(),\r\n            data: formData\r\n        }).then( response => {\r\n            if (response.status === 'success')\r\n            {\r\n                this.addFormPopup.close();\r\n                this.addFormPopup.destroy();\r\n\r\n                if (response.data['ID'])\r\n                {\r\n                    const item = this.tagSelector.getDialog().addItem({\r\n                        id: response.data['ID'],\r\n                        entityId: this.providerEntityId,\r\n                        title: `${response.data['NAME']} ${response.data['SECOND_NAME']} ${response.data['LAST_NAME']}`,\r\n                        sort: 1\r\n                    });\r\n\r\n                    if (item)\r\n                    {\r\n                        item.select();\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                throw new Error('Something went wrong. Unknown response status - '.response.status);\r\n            }\r\n        }).catch(response => {\r\n            const error = response.errors?.[0]?.message ?? 'Something went wrong. Unknown error';\r\n            BX.Cbit?.Mc?.Core?.MainUI?.showErrorPopup(error);\r\n            submitBtn && submitBtn.classList.remove(\"ui-btn-wait\");\r\n        });\r\n    }\r\n\r\n    validateForm(form) {\r\n        let result = true;\r\n\r\n        const fields = form.querySelectorAll('input, select, textarea');\r\n        fields.length && fields.forEach(field => {\r\n            const parent = field.closest('.ui-ctl');\r\n            if (field.hasAttribute('required') && !field.value)\r\n            {\r\n                parent && parent.classList.add('ui-ctl-danger');\r\n                result = false;\r\n            }\r\n            else\r\n            {\r\n                parent && parent.classList.remove('ui-ctl-danger');\r\n            }\r\n        })\r\n\r\n        return result;\r\n    }\r\n\r\n    createTextInput(labelText, name, required, placeholder = '',) {\r\n        return BX.create({\r\n            tag: 'label',\r\n            props: {\r\n                className: 'ui-ctl ui-ctl-textbox'\r\n            },\r\n            children: [\r\n                BX.create({\r\n                    tag: 'span',\r\n                    props: {\r\n                        className: 'ui-ctl-tag'\r\n                    },\r\n                    text: labelText\r\n                }),\r\n                BX.create({\r\n                    tag: 'input',\r\n                    props: {\r\n                        type: \"text\",\r\n                        name: name,\r\n                        className: 'ui-ctl-element',\r\n                    },\r\n                    attrs: {\r\n                        required: required,\r\n                        placeholder: placeholder\r\n                    }\r\n                }),\r\n            ]\r\n        });\r\n    }\r\n}\r\n","import {ExternalParticipant} from \"./scripts/external-participant\";\r\nimport './styles/style.css';\r\nimport {Extension} from 'main.core';\r\n\r\nBX.ready(() => {\r\n    try\r\n    {\r\n        BX.Cbit.Mc.Expense.ExternalParticipant = new ExternalParticipant(\r\n            Extension.getSettings('cbit.mc.expense.external-participant-selector')\r\n        );\r\n    }\r\n    catch (e)\r\n    {\r\n        console.log('Expense ExternalParticipant error', e)\r\n    }\r\n});"],"names":["ExternalParticipant","options","moduleId","providerEntityId","providerEntityType","submitAddFormBtnId","userFieldData","fieldName","isMultiple","tagSelector","BX","UI","EntitySelector","TagSelector","id","multiple","addButtonCaption","message","addButtonCaptionMore","dialogOptions","context","entities","this","dynamicLoad","dynamicSearch","hideOnSelect","hideByEsc","searchOptions","allowCreateItem","footerOptions","label","footer","create","props","className","text","events","click","_this","showAddPopup","onAfterTagAdd","event","getData","tag","container","inputId","input","value","type","name","append","Crm","EntityEditor","getDefault","getControlById","markAsChanged","onAfterTagRemove","babelHelpers","key","item","addTag","entityId","entityType","title","renderTo","addFormNode","createAddForm","addFormPopup","PopupWindowManager","content","width","closeIcon","titleBar","closeByEsc","overlay","backgroundColor","opacity","buttons","PopupWindowButton","_this2","submitAddForm","close","show","children","createTextInput","validateForm","submitBtn","classList","add","formData","FormData","ajax","runAction","sessid","bitrix_sessid","data","then","response","status","Error","_this3","destroy","getDialog","addItem","sort","select","error","errors","_response$errors","_response$errors$","Cbit","Mc","Core","MainUI","showErrorPopup","remove","form","result","fields","querySelectorAll","length","forEach","field","parent","closest","hasAttribute","labelText","required","placeholder","attrs","ready","Expense","Extension","getSettings","e","console","log"],"mappings":"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"}