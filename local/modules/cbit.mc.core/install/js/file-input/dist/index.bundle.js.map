{"version":3,"file":"index.bundle.js","sources":["../src/scripts/file-input.js","../src/index.js"],"sourcesContent":["import {Tag} from 'main.core';\r\n\r\nexport class FileInput\r\n{\r\n    constructor(options = {}) {\r\n\r\n    }\r\n\r\n    init(userFieldData = {})\r\n    {\r\n        this.allowedExt  = [];\r\n        this.elementId    = userFieldData['ENTITY_VALUE_ID'];\r\n        this.maxFileSize = this.getMaxFileSizeFromSettings(userFieldData);\r\n        this.fieldId     = userFieldData['ID'];\r\n        this.fieldName   = userFieldData['FIELD_NAME'];\r\n        this.isMultiple  = (userFieldData['MULTIPLE'] === 'Y');\r\n        this.container   = BX(userFieldData['CONTAINER_ID']);\r\n        this.valuesBlock = BX(userFieldData['VALUES_BLOCK_ID']);\r\n        this.fileInput   = BX(userFieldData['FILE_INPUT_ID']);\r\n\r\n        this.fillAllowedExtensions(userFieldData['SETTINGS']);\r\n        this.renderCurrentValue(userFieldData['VALUE_ITEMS']);\r\n\r\n        this.initEvents();\r\n\r\n        /*this.tagSelector = new BX.UI.EntitySelector.TagSelector({\r\n            events: {\r\n                onAfterTagAdd: (event) => {\r\n\r\n                },\r\n                onAfterTagRemove: function(event) {\r\n                    const {tag} = event.getData();\r\n                    const id = tag.id;\r\n\r\n                    if (this.container)\r\n                    {\r\n                        const inputId = this.isMultiple ? `${this.fieldName}_add_${id}` : `${this.fieldName}_add`;\r\n                        const input = BX(inputId);\r\n                        input && (input.value = '');\r\n                        BX.Crm?.EntityEditor?.getDefault()?.getControlById(this.fieldName)?.markAsChanged();\r\n                    }\r\n                },\r\n            }\r\n        });*/\r\n    }\r\n\r\n    renderCurrentValue(files) {\r\n        if(typeof files === 'object')\r\n        {\r\n            for(let key in files)\r\n            {\r\n                this.appendFileToCurrentValue(files[key]);\r\n            }\r\n        }\r\n    }\r\n\r\n    fillAllowedExtensions(userFieldSettings) {\r\n        if (typeof userFieldSettings?.['EXTENSIONS'] === 'object')\r\n        {\r\n            for(let key in userFieldSettings['EXTENSIONS'])\r\n            {\r\n                if (userFieldSettings['EXTENSIONS'][key] === true)\r\n                {\r\n                    this.allowedExt.push(key);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    initEvents() {\r\n        this.fileInput && this.fileInput.addEventListener('change', () => this.onFileAdd());\r\n    }\r\n\r\n    onFileAdd(){\r\n        if (this.checkFiles(this.fileInput.files))\r\n        {\r\n            const formData = new FormData();\r\n            formData.append('USER_FIELD_ID', this.fieldId);\r\n            formData.append('FILE', this.fileInput.files[0]);\r\n\r\n            const label = this.fileInput.closest('label');\r\n            label && label.classList.add('loading');\r\n\r\n            BX.ajax.runAction('cbit.mc:core.base.uploadFile', {\r\n                sessid: BX.bitrix_sessid(),\r\n                data: formData\r\n            }).then( response => {\r\n                if (response.status === 'success')\r\n                {\r\n                    if (!response.data.ID)\r\n                    {\r\n                        throw new Error('File id not found in response');\r\n                    }\r\n\r\n                    this.appendFileToCurrentValue(response.data);\r\n\r\n                    BX.Crm?.EntityEditor?.getDefault()?.getControlById(this.fieldName)?.markAsChanged();\r\n                    //BX.Cbit?.Mc?.Core?.MainUI?.showSuccessPopup();\r\n                    label && label.classList.remove('loading');\r\n                    this.fileInput.value = '';\r\n                }\r\n                else\r\n                {\r\n                    throw new Error('Something went wrong. Unknown response status - '.response.status);\r\n                }\r\n            }).catch(response => {\r\n                const error = response.errors?.[0]?.message ?? 'Something went wrong. Unknown error';\r\n                BX.Cbit?.Mc?.Core?.MainUI?.showErrorPopup(error);\r\n                label && label.classList.remove('loading');\r\n            });\r\n        }\r\n    }\r\n\r\n    onFileDelete(fileId){\r\n        if(!Number(fileId) > 0)\r\n        {\r\n            BX.Cbit?.Mc?.Core?.MainUI?.showErrorPopup('File id can not be empty');\r\n        }\r\n        else\r\n        {\r\n            const inputId  = this.isMultiple ? `${this.fieldName}_add_${fileId}` : `${this.fieldName}_add`;\r\n            let input = BX(inputId);\r\n            if (input)\r\n            {\r\n                const wrapper = input.closest('.webform-field-item-wrap');\r\n                wrapper ? wrapper.remove() : input.remove();\r\n                BX.Crm?.EntityEditor?.getDefault()?.getControlById(this.fieldName)?.markAsChanged();\r\n                this.fileInput.value = '';\r\n            }\r\n        }\r\n    }\r\n\r\n    checkFiles(files) {\r\n        let res = true;\r\n\r\n        for (let i = 0; i < files.length; i++)\r\n        {\r\n            if(files[i].size > this.maxFileSize){\r\n                BX.Cbit.Mc.Core.MainUI.showErrorPopup(BX.message('MAX_FILE_SIZE_ERROR'));\r\n                res = false;\r\n            }\r\n\r\n            const ext = this.getExtFromFileName(files[i].name);\r\n            \r\n            if(!this.allowedExt.includes(ext)){\r\n                BX.Cbit.Mc.Core.MainUI.showErrorPopup(BX.message('FILE_EXT_ERROR'));\r\n                res = false;\r\n            }\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    getMaxFileSizeFromSettings(userFieldData) {\r\n        let maxFileSize = 10*1024*1024;\r\n        if(userFieldData['SETTINGS']?.['MAX_ALLOWED_SIZE'] && !isNaN(userFieldData['SETTINGS']['MAX_ALLOWED_SIZE']))\r\n        {\r\n            maxFileSize = Number(userFieldData['SETTINGS']['MAX_ALLOWED_SIZE']);\r\n        }\r\n        return maxFileSize;\r\n    }\r\n\r\n    getExtFromFileName(fileName) {\r\n        fileName = String(fileName);\r\n        let ext = '';\r\n        const arr = fileName.split(\".\");\r\n        if(arr.length > 1)\r\n        {\r\n            ext = arr[arr.length - 1];\r\n        }\r\n        return ext;\r\n    }\r\n\r\n    appendFileToCurrentValue(item) {\r\n        const fractions = Number(item['FILE_SIZE']) >= 1024 ? 0 : 2;\r\n        const fileSize = (Number(item['FILE_SIZE'])/1024).toFixed(fractions);\r\n        const inputId  = this.isMultiple ? `${this.fieldName}_add_${item['ID']}` : `${this.fieldName}_add`;\r\n        let input = BX(inputId);\r\n        if (input)\r\n        {\r\n            input.value = item['ID'];\r\n        }\r\n        else\r\n        {\r\n            const html = BX.create('div', {\r\n                props: {\r\n                    className:\"webform-field-item-wrap\"\r\n                },\r\n                children: [\r\n                    BX.create('a', {\r\n                        props: {\r\n                            className:\"upload-file-name\"\r\n                        },\r\n                        attrs: {\r\n                            href: item['SRC'],\r\n                            target: '_blank'\r\n                        },\r\n                        text: item['ORIGINAL_NAME']\r\n                    }),\r\n                    BX.create('span', {\r\n                        props: {\r\n                            className: 'upload-file-size'\r\n                        },\r\n                        text: `${fileSize}kb`\r\n                    }),\r\n                    BX.create('span', {\r\n                        props: {\r\n                            className: 'file-delete'\r\n                        },\r\n                        dataset:{\r\n                            id: item['ID']\r\n                        },\r\n                        text: 'delete',\r\n                        events: {\r\n                            click: () => this.onFileDelete(item['ID'])\r\n                        }\r\n                    }),\r\n                    BX.create('input', {\r\n                        attrs: {\r\n                            id: inputId,\r\n                            type: 'hidden',\r\n                            name: this.isMultiple ? `${this.fieldName}[]` : this.fieldName,\r\n                        },\r\n                        props: {\r\n                            value: item['ID']\r\n                        }\r\n                    })\r\n                ]\r\n            });\r\n\r\n            this.valuesBlock && this.valuesBlock.append(html);\r\n        }\r\n    }\r\n}\r\n","import {FileInput} from \"./scripts/file-input\";\r\nimport './styles/style.css';\r\nimport {Extension} from 'main.core';\r\n\r\nBX.ready(() => {\r\n    try\r\n    {\r\n        BX.Cbit.Mc.Core.FileInput = new FileInput(\r\n            Extension.getSettings('cbit.mc.expense.file-input')\r\n        );\r\n    }\r\n    catch (e)\r\n    {\r\n        console.log('Extension FileInput error', e)\r\n    }\r\n});"],"names":["FileInput","userFieldData","allowedExt","elementId","maxFileSize","this","getMaxFileSizeFromSettings","fieldId","fieldName","isMultiple","container","BX","valuesBlock","fileInput","fillAllowedExtensions","renderCurrentValue","initEvents","files","babelHelpers","key","appendFileToCurrentValue","userFieldSettings","push","addEventListener","_this","onFileAdd","checkFiles","formData","FormData","append","label","closest","classList","add","ajax","runAction","sessid","bitrix_sessid","data","then","response","status","Error","ID","_this2","Crm","EntityEditor","getDefault","getControlById","markAsChanged","remove","value","error","errors","_response$errors","_response$errors$","message","Cbit","Mc","Core","MainUI","showErrorPopup","fileId","Number","inputId","input","wrapper","res","i","length","size","ext","getExtFromFileName","name","includes","isNaN","fileName","arr","String","split","item","fractions","fileSize","toFixed","html","create","props","className","children","attrs","href","target","text","dataset","id","events","click","_this3","onFileDelete","type","ready","Extension","getSettings","e","console","log"],"mappings":"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"}